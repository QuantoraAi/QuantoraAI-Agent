# environments/development.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: phasma-dev
  labels:
    env: development
    ai.orchestration: "true"

---
# PostgreSQL with persistent storage for metadata
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: phasma-postgres
  namespace: phasma-dev
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      securityContext:
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        env:
        - name: POSTGRES_DB
          value: phasma_metadata
        - name: POSTGRES_USER
          value: admin
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: postgres-password
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        readinessProbe:
          exec:
            command: ["pg_isready", "-U", "admin"]
          initialDelaySeconds: 10
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 5Gi

---
# Redis cluster for caching
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: phasma-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command: ["redis-server", "--save 60 1", "--loglevel warning"]
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        livenessProbe:
          exec:
            command: ["redis-cli", "ping"]
          initialDelaySeconds: 20
        readinessProbe:
          exec: 
            command: ["redis-cli", "ping"]
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pvc

---
# RabbitMQ for agent messaging
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
  namespace: phasma-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3.12-management
        env:
        - name: RABBITMQ_DEFAULT_USER
          value: phasma
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: messaging-credentials
              key: rabbitmq-password
        ports:
        - name: amqp
          containerPort: 5672
        - name: management
          containerPort: 15672
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq
      volumes:
      - name: rabbitmq-data
        persistentVolumeClaim:
          claimName: rabbitmq-pvc

---
# Monitoring stack
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: phasma-monitor
  namespace: phasma-dev
spec:
  selector:
    matchLabels:
      app: phasma-ai
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
  namespaceSelector:
    matchNames:
    - phasma-dev

---
# Development UI components
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dev-tools
  namespace: phasma-dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dev-tools
  template:
    metadata:
      labels:
        app: dev-tools
    spec:
      containers:
      - name: pgadmin
        image: dpage/pgadmin4:7.8
        env:
        - name: PGADMIN_DEFAULT_EMAIL
          value: admin@phasma.ai
        - name: PGADMIN_DEFAULT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: pgadmin-password
        ports:
        - containerPort: 80
      - name: redis-insight
        image: redislabs/redisinsight:1.14
        ports:
        - containerPort: 8001

---
# Network policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dev-isolation
  namespace: phasma-dev
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          env: development
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          env: development

---
# Persistent volumes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: phasma-dev
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: rabbitmq-pvc
  namespace: phasma-dev
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# Service exposure
apiVersion: v1
kind: Service
metadata:
  name: dev-ingress
  namespace: phasma-dev
spec:
  type: NodePort
  ports:
  - name: pgadmin
    port: 80
    targetPort: 80
    nodePort: 30080
  - name: redis-insight
    port: 8001
    targetPort: 8001
    nodePort: 30081
  selector:
    app: dev-tools
